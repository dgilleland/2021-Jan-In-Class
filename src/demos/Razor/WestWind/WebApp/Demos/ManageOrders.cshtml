@using WebApp.Data
@{
    Page.Title = "Manage Customer Order";
    Layout = "~/_Layout.cshtml";

    string message = string.Empty;
    // Grabbing information POSTed to this page
    // Noticed that ALL of the information submitted by the browser is sent as a string
    // - HTTP/HTTPS - Always sends data a test
    string action = Request.Form[nameof(action)];
    string customerId = Request.Form[nameof(customerId)];
    string orderId = Request.Form[nameof(orderId)];
    string repId = Request.Form[nameof(repId)];
    string orderDate = Request.Form[nameof(orderDate)];
    string requiredBy = Request.Form[nameof(requiredBy)];
    string paymentDueBy = Request.Form[nameof(paymentDueBy)];
    string freight = Request.Form[nameof(freight)];
    string shipped = Request.Form[nameof(shipped)];
    string shipName = Request.Form[nameof(shipName)];
    string shipTo = Request.Form[nameof(shipTo)];
    string comments = Request.Form[nameof(comments)];

    // I'll do my exception handling around the entire POST processing of the form's input
    try
    {
        // Instance of my BLL class
        var controller = new WestWindSystem.BLL.OrdersController();
        // Inside the try block, I will run this code until I get an Exception (until things "blow up")
        if (IsPost)
        {
            switch (action)
            {
                case "PrepOrder": // This is a new order where we know who the customer is
                    break;
                case "EditOrder": // This is an existing order where we know the customer & order id
                    {

                        { // TODO: Clean up curly braces
                            Order existing = controller.GetOrder(int.Parse(orderId));
                            {
                                // I am "unpacking" the Order object into separate variables for use in the form
                                // set all the variables to the contents of the Order object
                                if (existing.SalesRepID.HasValue)
                                {
                                    repId = existing.SalesRepID.ToString();
                                }
                                if (existing.OrderDate.HasValue)
                                {
                                    orderDate = existing.OrderDate.Value.ToString("yyyy-MM-dd");
                                }
                                if (existing.RequiredDate.HasValue)
                                {
                                    requiredBy = existing.RequiredDate.Value.ToString("yyyy-MM-dd");
                                }
                                if (existing.PaymentDueDate.HasValue)
                                {
                                    paymentDueBy = existing.PaymentDueDate.Value.ToString("yyyy-MM-dd");
                                }
                                if (existing.Freight.HasValue)
                                {
                                    freight = existing.Freight.ToString();
                                }
                                shipped = existing.Shipped ? "on" : string.Empty; // ternary expression
                                shipTo = existing.ShipAddressID.ToString();
                                comments = existing.Comments;
                            }
                        }
                    }
                    break;
                case "AddOrder": // Add the order to the database
                                 // 1) Create an instance of our Entity class
                    Order newOrder = BuildOrder(customerId, repId, orderDate, requiredBy, paymentDueBy, freight, shipped, shipTo, shipName, comments);

                    // 4) Giving some feedback regarding the success
                    orderId = controller.AddOrder(newOrder).ToString();
                    message = $"The order was saved with order id {orderId}.";
                    break;
                case "UpdateOrder": // Change the data in the database
                    // 1) Create an instance of our Entity class from the user input
                    Order existingOrder = BuildOrder(customerId, repId, orderDate, requiredBy, paymentDueBy, freight, shipped, shipTo, shipName, comments);
                    existingOrder.OrderID = int.Parse(orderId);

                    controller.UpdateOrder(existingOrder);
                    // 4 Give some feedback to the user
                    message = $"The order {orderId} has been updated.";
                    break;
                case "DeleteOrder": // Remove the data from the database
                    controller.DeleteOrder(int.Parse(orderId));
                    // 4) Give feedback to the user
                    message = $"The order {orderId} has been removed.";
                    customerId = string.Empty;
                    orderId = string.Empty;
                    repId = string.Empty;
                    orderDate = string.Empty;
                    requiredBy = string.Empty;
                    paymentDueBy = string.Empty;
                    freight = string.Empty;
                    shipped = string.Empty;
                    shipName = string.Empty;
                    shipTo = string.Empty;
                    comments = string.Empty;
                    break;
                case "ClearForm": // We want to "empty" all the input fields
                    customerId = string.Empty;
                    orderId = string.Empty;
                    repId = string.Empty;
                    orderDate = string.Empty;
                    requiredBy = string.Empty;
                    paymentDueBy = string.Empty;
                    freight = string.Empty;
                    shipped = string.Empty;
                    shipName = string.Empty;
                    shipTo = string.Empty;
                    comments = string.Empty;
                    break;
                default:
                    break;
            }
        }
    }
    catch (Exception ex)
    {
        // Here I can handle the problem with whatever actions seem reasonable.
        message = $"There was a problem with processing your request: {ex.Message}";
    }
}

<h1>Manage Orders</h1>
<form method="post">
    <div class="row">
        <div class="col">
            @{ 
                int throwaway;
                bool hasOrderId = int.TryParse(orderId, out throwaway);
            }
            <button type="submit" name="@nameof(action)" value="AddOrder" disabled="@hasOrderId" class="btn btn-primary">Add Order</button>
            <button type="submit" name="@nameof(action)" value="UpdateOrder" disabled="@(!hasOrderId)" class="btn btn-success">Update Order</button>
            <button type="submit" name="@nameof(action)" value="DeleteOrder" disabled="@(!hasOrderId)" class="btn btn-danger">Delete Order</button>
            <button type="submit" name="@nameof(action)" value="ClearForm" class="btn btn-warning">Clear Form</button>
            <button type="reset" class="btn btn-secondary">Reset</button>
            <br />
            @message
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label>
                Order ID:
                <!-- Note to self: Disabled input elements will not post their data to the web server when submitting the form -->
                <input type="text" value="@orderId" disabled class="form-control" />
                <input type="hidden" name="@nameof(orderId)" value="@orderId" />
            </label>
            <br /><br />
            <label>
                Sales Rep:
                @using (var context = new WestWindContext())
                {
                    var employees = context.Employees.ToList();
                    <select name="@nameof(repId)" class="form-control">
                        <option value="">[Select a Sales Rep]</option>
                        @foreach (var person in employees)
                        {
                            <option value="@person.EmployeeID"
                                    selected="@(person.EmployeeID.ToString() == repId)">
                                @person.FirstName @person.LastName
                            </option>
                        }
                    </select>
                }
            </label>
            <br /><br />
            <label>
                Customer:
                @using (var context = new WestWindContext())
                {
                    // Get a list of the customers for my drop-down
                    List<Customer> customers = context.Customers.ToList(); // Get all the customers as a List<Customer>

                    <select name="@nameof(customerId)" class="form-control" required>
                        <option value="">[Select a Customer]</option>
                        @foreach (var company in customers)
                        {
                            // Add in an entry in the drop-down for each customer
                            <option value="@company.CustomerID" selected="@(customerId == company.CustomerID)">@company.CompanyName</option>
                        }
                    </select>
                }
            </label>
            <br /><br />
            <label>
                Order Date:
                <input type="date" name="@nameof(orderDate)" value="@orderDate" class="form-control" />
            </label>
            <br /><br />
            <label>
                Required By:
                <input type="date" name="@nameof(requiredBy)" value="@requiredBy" class="form-control" />
            </label>
            <br /><br />
            <label>
                Payment Due Date:
                <input type="date" name="@nameof(paymentDueBy)" value="@paymentDueBy" class="form-control" />
            </label>
        </div>
        <div class="col">
            <label>
                Freight:
                <input type="text" name="@nameof(freight)" value="@freight" class="form-control" />
            </label>
            <br /><br />
            <label>
                Shipped:
                <input type="checkbox" name="@nameof(shipped)" checked="@(shipped == "on")" /> Yes
            </label>
            <br /><br />
            <label>
                Ship Name:
                <input type="text" name="@nameof(shipName)" value="@shipName" class="form-control" />
            </label>
            <br /><br />
            <label>
                Ship Address:
                <select name="@nameof(shipTo)" class="form-control">
                    <option value="">[Select a Destination Address]</option>
                    @using (var context = new WestWindContext())
                    {
                        var places = context.Addresses.ToList();
                        foreach (var address in places)
                        {
                            <option value="@address.AddressID"
                                    selected="@(address.AddressID.ToString() == shipTo)">
                                @address.Street - @address.City
                            </option>
                        }
                    }
                </select>
            </label>
            <br /><br />
            <label>
                Comments:
                <textarea name="@nameof(comments)" rows="4" class="form-control">@comments</textarea>
            </label>
        </div>
    </div>
</form>

@functions {
    // straight methods for processing information - should have NO "display" aspects
    public Order BuildOrder(string customerId, string repId, string orderDate, string requiredBy, string paymentDueBy, string freight, string shipped, string shipTo, string shipName, string comments)
    {
        Order newOrder = new Order();
        newOrder.CustomerID = customerId;
        int temp;
        if (int.TryParse(repId, out temp)) // The .TryParse of the built-in datatypes are for attempting to convert a string to some non-string value
        {
            newOrder.SalesRepID = temp;
        }
        DateTime tempDate;
        if (DateTime.TryParse(orderDate, out tempDate))
        {
            newOrder.OrderDate = tempDate;
        }
        if (DateTime.TryParse(requiredBy, out tempDate))
        {
            newOrder.RequiredDate = tempDate;
        }
        if (DateTime.TryParse(paymentDueBy, out tempDate))
        {
            newOrder.PaymentDueDate = tempDate;
        }
        decimal tempMoney;
        if (decimal.TryParse(freight, out tempMoney))
        {
            newOrder.Freight = tempMoney;
        }
        newOrder.Shipped = (shipped == "on");
        if (int.TryParse(shipTo, out temp))
        {
            newOrder.ShipAddressID = temp;
        }
        newOrder.ShipName = shipName;
        newOrder.Comments = comments;

        return newOrder;
    }
}